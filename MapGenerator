using Godot;
using System;

public partial class Player : CharacterBody3D
{
	[Export] public float Speed = 2.0f;

	private AnimatedSprite3D anim;
	private Vector3 lastDirection = Vector3.Forward; // Default facing forward

	public override void _Ready()
	{
		anim = GetNode<AnimatedSprite3D>("AnimatedSprite3D");
	}

	public override void _PhysicsProcess(double delta)
	{
		Vector3 dir = Vector3.Zero;

		if (Input.IsActionPressed("ui_right"))
			dir.X += 1;
		if (Input.IsActionPressed("ui_left"))
			dir.X -= 1;
		if (Input.IsActionPressed("ui_up"))
			dir.Z -= 1;
		if (Input.IsActionPressed("ui_down"))
			dir.Z += 1;

		if (dir != Vector3.Zero)
		{
			dir = dir.Normalized();
			Velocity = dir * Speed;
			MoveAndSlide();

			lastDirection = dir; // Save last move direction

			if (Mathf.Abs(dir.X) > Mathf.Abs(dir.Z))
			{
				// Walking left or right
				anim.Play("walk_right");

				// Flip horizontally if moving left
				if (dir.X < 0)
					anim.FlipH = true;
				else if (dir.X > 0)
					anim.FlipH = false;
			}
			else
			{
				// Walking up or down
				anim.Play(dir.Z > 0 ? "walk_down" : "walk_up");
				anim.FlipH = false; // make sure flip doesnâ€™t carry over
			}
		}
		else
		{
			// Idle animation
			if (Mathf.Abs(lastDirection.X) > Mathf.Abs(lastDirection.Z))
			{
				anim.Play("idle_right");

				// Flip if last direction was left
				if (lastDirection.X < 0)
					anim.FlipH = true;
				else if (lastDirection.X > 0)
					anim.FlipH = false;
			}
			else
			{
				anim.Play(lastDirection.Z > 0 ? "idle_down" : "idle_up");
				anim.FlipH = false;
			}

			Velocity = Vector3.Zero;
		}
	}
}
